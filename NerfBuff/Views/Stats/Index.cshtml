
@{
    ViewData["Title"] = "Statistics";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model NerfBuff.Models.Stats

<center>
    <div>
        <h1>Posts By Month:</h1>
        <svg id="postsChart"></svg>
    </div>
    <div>
        <h1>Top 5 commenters:</h1>
        <svg width="500" height="250" id="categoriesChart"></svg>

    </div>
</center>

<script src="https://d3js.org/d3.v4.min.js"></script>


<script>
    // *** donut chart ***
    var monthsCountDict = @Html.Raw(Json.Serialize(Model.PostsCountByMonth));
    var postsSum = 0;

    var monthsCount = Object.keys(monthsCountDict).map(function (key) {
        return { month: key, count: monthsCountDict[key] };
    });

    for (var i = 0; i < monthsCount.length; i++){
        postsSum += monthsCount[i].count;
    }

    var width = 540,
        height = 540,
        radius = 200;

    var color = d3.scaleOrdinal(d3.schemeCategory20b);

    var arc = d3.arc()
        .outerRadius(radius - 10)
        .innerRadius(100);

    var pie = d3.pie()
        .sort(null)
        .value(function (d) {
            return d.count;
        });

    var monthsSvg = d3.select('#postsChart')
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    var g = monthsSvg.selectAll(".arc")
        .data(pie(monthsCount))
        .enter().append("g");

    g.append("path")
        .attr("d", arc)
        .style("fill", function (d, i) {
            return color(d.data.month);
        });

    g.append("text")
        .attr("transform", function (d) {
            var _d = arc.centroid(d);
            _d[0] *= 1.5;	//multiply by a constant factor
            _d[1] *= 1.5;	//multiply by a constant factor
            return "translate(" + _d + ")";
        })
        .attr("dy", ".50em")
        .style("text-anchor", "middle")
        .text(function (d) {
            return d.data.month;
        });

    g.append("text")
        .attr("text-anchor", "middle")
        .attr('font-size', '4em')
        .attr('y', 20)
        .text(postsSum);
   // *** donut chart ***

   // *** bar chart ***
    var categoriesCountDict = @Html.Raw(Json.Serialize(Model.CommentsCountByPosts));

    var categoriesCount = Object.keys(categoriesCountDict).map(function (key) {
        return { Author: key, count: categoriesCountDict[key] };
    });
    console.log(categoriesCount)
    var categoriesSvg = d3.select('#categoriesChart'),
    margin = { top: 20, right: 20, bottom: 30, left: 40 },
    barChartWidth = +categoriesSvg.attr("width") - margin.left - margin.right,
    barChartHeight = +categoriesSvg.attr("height") - margin.top - margin.bottom;

    var x = d3.scaleBand().rangeRound([0, barChartWidth]).padding(0.1),
        y = d3.scaleLinear().rangeRound([barChartHeight, 0]);

    var g = categoriesSvg.append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");



    x.domain(categoriesCount.map(function (d) { console.log(d.Author); return d.Author; }));
    y.domain([0, d3.max(categoriesCount, function (d) { return d.count; })]);

        g.append("g")
            .attr("class", "axis axis--x")
            .attr("transform", "translate(0," + barChartHeight + ")")
            .call(d3.axisBottom(x));


        g.selectAll(".bar")
            .data(categoriesCount)
            .enter().append("rect")
            .attr("class", "bar")
            .attr("x", function (d) { return x(d.Author); })
            .attr("y", function (d) { return y(d.count); })
            .attr("width", x.bandwidth())
            .attr("height", function (d) { return barChartHeight - y(d.count); }).
            style("fill", function (d, i) {
                return color(d.Author);
            });

   // *** bar chart ***
</script>
